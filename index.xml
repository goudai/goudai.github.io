<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>青木的博客</title>
    <link>https://goudai.github.io/</link>
    <description>Recent content on 青木的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 08 Apr 2020 16:00:09 +0000</lastBuildDate><atom:link href="https://goudai.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Spring Boot Operator部署SpringBoot到K8S</title>
      <link>https://goudai.github.io/posts/Spring-Boot-Operator-User-Guide/</link>
      <pubDate>Wed, 08 Apr 2020 16:00:09 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Spring-Boot-Operator-User-Guide/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在Kubernetes中部署spring boot应用整体上来说是一件比较繁琐的事情，而&lt;a href=&#34;https://github.com/goudai/spring-boot-operator&#34;&gt;Spring Boot Operator&lt;/a&gt;则能带给你更清爽简单的体验。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/goudai/spring-boot-operator&#34;&gt;Spring Boot Operator&lt;/a&gt;基于Kubernetes的&lt;a href=&#34;https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions&#34;&gt;custom resource definitions (CRDs)&lt;/a&gt;扩展API进行的开发。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>categories</title>
      <link>https://goudai.github.io/categories/</link>
      <pubDate>Wed, 08 Apr 2020 03:29:15 +0000</pubDate>
      
      <guid>https://goudai.github.io/categories/</guid>
      <description></description>
    </item>
    
    <item>
      <title>tags</title>
      <link>https://goudai.github.io/tags/</link>
      <pubDate>Wed, 08 Apr 2020 03:29:05 +0000</pubDate>
      
      <guid>https://goudai.github.io/tags/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Prometheus Operator监控ETCD</title>
      <link>https://goudai.github.io/posts/Monitor-ETCD/</link>
      <pubDate>Mon, 02 Sep 2019 14:04:35 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Monitor-ETCD/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在前面的文章&lt;a href=&#34;https://qingmu.io/2019/08/30/Customize-your-kube-prometheus/&#34;&gt;优雅的使用Prometheus Operator&lt;/a&gt;中我们搭建好了基础的监控平台和图表.
现在我们可以将etcd也纳入监控范围内了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prometheus Operator监控SpringCloud</title>
      <link>https://goudai.github.io/posts/Monitor-springboot-microservices/</link>
      <pubDate>Sun, 01 Sep 2019 22:18:47 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Monitor-springboot-microservices/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在上一篇文章&lt;a href=&#34;https://qingmu.io/2019/08/30/Customize-your-kube-prometheus/&#34;&gt;优雅的使用Prometheus Operator&lt;/a&gt;中我们搭建起来了监控的基础堆栈。下来我们来监控我们的业务服务。&lt;/li&gt;
&lt;li&gt;监控这个SpringCloud的java微服务的方式有很多，比如说基于eureka的服务型和基于kubernetes的endpoints的注解服务发现。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>优雅的使用Prometheus Operator</title>
      <link>https://goudai.github.io/posts/Customize-your-kube-prometheus/</link>
      <pubDate>Fri, 30 Aug 2019 22:09:34 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Customize-your-kube-prometheus/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;为了方便大家使用prometheus，&lt;code&gt;Coreos&lt;/code&gt;出了提供了一个Operator&lt;a href=&#34;https://github.com/coreos/prometheus-operator&#34;&gt;Prometheus Operator&lt;/a&gt;，而为了方便大家一站式的监控方案就有了项目&lt;a href=&#34;https://github.com/coreos/kube-prometheus&#34;&gt;kube-prometheus&lt;/a&gt;是一个脚本项目，它主要使用&lt;code&gt;jsonnet&lt;/code&gt;写成，其作用呢就是模板+参数然后渲染出yaml文件集，主要是作用是提供一个开箱即用的监控栈，用于kubernetes集群的监控和应用程序的监控。
这个项目主要包括以下软件栈&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus Operator&lt;/li&gt;
&lt;li&gt;Highly available Prometheus&lt;/li&gt;
&lt;li&gt;Highly available Alertmanager&lt;/li&gt;
&lt;li&gt;Prometheus node-exporter&lt;/li&gt;
&lt;li&gt;Prometheus Adapter for Kubernetes Metrics APIs&lt;/li&gt;
&lt;li&gt;Kube-state-metrics&lt;/li&gt;
&lt;li&gt;Grafana&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说是开箱即用，确实也是我们只需要clone下来，然后&lt;code&gt;kubectl apply ./manifests&lt;/code&gt;，manifests目录中生成的是预先生成的yaml描述文件，有诸多不方便的地方，比如说&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像仓库的地址都在gcr和query.io，这两个地址国内拉起来都费劲&lt;/li&gt;
&lt;li&gt;没有持久化存储promethus的数据&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>部署业务并使用Feign进行服务间调用（附带一部分源码分析）</title>
      <link>https://goudai.github.io/posts/Run-the-business-service-to-complete-the-service-call-using-Feign/</link>
      <pubDate>Fri, 16 Aug 2019 20:51:07 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Run-the-business-service-to-complete-the-service-call-using-Feign/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在前面我们搭建起来了&lt;a href=&#34;https://qingmu.io/2019/08/07/Run-eureka-cluster-on-kubernetes/&#34;&gt;eureka&lt;/a&gt;,和&lt;a href=&#34;https://qingmu.io/2019/08/09/Run-the-configuration-hub-cluster-on-kubernetes/&#34;&gt;配置中心&lt;/a&gt;，基于这两者我们就能愉快的写业务代码了。这章节我们看下怎么业务服务和业务服务直接如何完成调用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从部署mysql聊一聊有状态服务和PV及PVC</title>
      <link>https://goudai.github.io/posts/Run-mysql-on-kubernetes/</link>
      <pubDate>Sun, 11 Aug 2019 22:25:50 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Run-mysql-on-kubernetes/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;部署mysql之前我们需要先了解一个概念&lt;code&gt;有状态服务&lt;/code&gt;。这是一种特殊的服务，简单的归纳下就是会产生需要持久化的数据，并且有很强的I/O需求，且重启需要依赖上次存储到磁盘的数据。如典型的mysql，kafka，zookeeper等等。&lt;/p&gt;
&lt;p&gt;在我们有比较优秀的商业存储的前提下，灰常推荐使用&lt;code&gt;有状态服务&lt;/code&gt;进行部署，计算和存储分离那是相当的爽的。在实际生产中如果没有这种存储，才有localPV也是不错的选择，当然local pv其实呢和hostPath是一样的。当然我们在开发测试环境也是可以自己搭建一套简单的如NFS服务，来享受存储和计算分离的爽快感。&lt;/p&gt;
&lt;p&gt;kubernetes中定义一种了资源类型&lt;code&gt;Stateful Service&lt;/code&gt;即有状态服务，有状态服务需要的持久化数据动态绑定我们可以利用存储的API PersistentVolume（PV）和PersistentVolumeClaim（PVC）来进行需要的相关数据的绑定和存储。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在kubernetes运行分布式追踪zipkin</title>
      <link>https://goudai.github.io/posts/Run-distributed-trace-zipkin-in-kubernetes/</link>
      <pubDate>Sat, 10 Aug 2019 20:27:39 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Run-distributed-trace-zipkin-in-kubernetes/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://zipkin.io&#34;&gt;Zipkin&lt;/a&gt;是一个开放&lt;a href=&#34;https://github.com/openzipkin/zipkin&#34;&gt;源代码&lt;/a&gt;分布式的跟踪系统，每个服务向zipkin报告计时数据，zipkin会根据调用关系通过Zipkin UI生成依赖关系图。简单的来说就是个http服务器
它支持多种后端存储（&amp;ldquo;cassandra&amp;rdquo;,&amp;ldquo;mysql&amp;rdquo;,&amp;ldquo;elasticsearch&amp;rdquo;）持久化客户端推送过来的数据.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在kubernetes上运行SpringCloud配置中心</title>
      <link>https://goudai.github.io/posts/Run-the-configuration-hub-cluster-on-kubernetes/</link>
      <pubDate>Fri, 09 Aug 2019 23:52:56 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Run-the-configuration-hub-cluster-on-kubernetes/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在分布式系统中，我们的配置管理起来是很麻烦的一件事儿，特别是在如果没有配置中心的时候。在我们java开发中，一般而言会将敏感配置信息（如DB的user，password），数据库的地址，redis地址等等，
一系列配置信息和项目代码解耦，根据每个环境单独配置，这样一来是方便不需要改代码，也不需要在项目中冗余多份，二来是更加的安全。那么分离之后我们将面临的问题是怎么读取这个配置文件：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在kubernetes上运行eureka集群</title>
      <link>https://goudai.github.io/posts/Run-eureka-cluster-on-kubernetes/</link>
      <pubDate>Wed, 07 Aug 2019 22:49:20 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Run-eureka-cluster-on-kubernetes/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;eureka 在springcloud体系中，主要实现一个注册中心的角色，所有的服务都将注册到eureke中，调用用者将从这里通过名称获取到对应的服务的IP集合列表。
作为一个分布式系统eureka在CAP中，选中了AP，优先保证可用性，放弃了强一致性，这样设计也符合注册中心的需要。
当发生网络分区故障（15分钟内超过85%的节点都没有正常的心跳），eureka会启用注册保护，即维持住当前心跳虽然失败的服务列表，并不进行删除。并能正常的提供查询服务（虽然不是最新）和注册服务（即不会同步到其他eureka节点），当网络恢复时，eureka会正确的同步信息，和恢复删除过期节点信息。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在kubernetes上运行Spring Cloud Gateway（二）</title>
      <link>https://goudai.github.io/posts/Run-Spring-Cloud-Gateway-on-kubernetes-2/</link>
      <pubDate>Wed, 07 Aug 2019 12:25:41 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Run-Spring-Cloud-Gateway-on-kubernetes-2/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;https://qingmu.io/2019/08/06/Run-Spring-Cloud-Gateway-on-kubernetes/&#34;&gt;https://qingmu.io/2019/08/06/Run-Spring-Cloud-Gateway-on-kubernetes/&lt;/a&gt;文章中，我们搭建好了基本的网关的架子。这篇文章中
我们继续剩下的部分，将网关和部署到k8s中，并结合&lt;code&gt;Ingress&lt;/code&gt;完成域名访问我们的网关，通过&lt;code&gt;Secret&lt;/code&gt;完成网关HTTPS的安全加密。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在kubernetes上运行Spring Cloud Gateway（一）</title>
      <link>https://goudai.github.io/posts/Run-Spring-Cloud-Gateway-on-kubernetes/</link>
      <pubDate>Tue, 06 Aug 2019 17:43:36 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Run-Spring-Cloud-Gateway-on-kubernetes/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;[https://github.com/spring-cloud/spring-cloud-gateway](Spring Cloud Gateway)是Spring Cloud官方推出的一个网关项目，主要是基于&lt;a href=&#34;https://github.com/reactor/reactor-netty&#34;&gt;reactor-netty&lt;/a&gt;实现。网关在微服务系统主要充当了一个入口&amp;quot;门&amp;quot;的作用，所有的IN/OUT都需要经过这一道门，才能访问到微服务池子中的功能api。
这样的设计方便了我们对业务功能的保护api资源的保护，我们可以在这里灵活的控制对外开放的API集合，而这些API集合就构成了我们的&lt;code&gt;&amp;quot;系统&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们还可以方便的在这里完成鉴权，如果是非法用户之间在这里干掉，从而避免了对业务的调用。&lt;/p&gt;
&lt;p&gt;还可以对参数进行转换，比如从调用者带过来的是一个&lt;code&gt;JWT&lt;/code&gt;我们可以解析这个Token，得到诸如&lt;code&gt;currentUserId&lt;/code&gt;，&lt;code&gt;租户id&lt;/code&gt;，&lt;code&gt;username&lt;/code&gt;，等等一些列参数后，再往后传递到具体的微服务上。&lt;/p&gt;
&lt;p&gt;这里只是一些常用功能的列举，本质上来说呢，他就是一组Filters，我们可以通过扩展它的Filter，快速完成业务所需要的功能效果。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>动手修改kubeam生成证书有效期为100年</title>
      <link>https://goudai.github.io/posts/Hands-on-modification-of-the-validity-period-of-the-kubeam-generation-certificate/</link>
      <pubDate>Thu, 01 Aug 2019 23:33:40 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Hands-on-modification-of-the-validity-period-of-the-kubeam-generation-certificate/</guid>
      <description>&lt;p&gt;这里我们已v1.14.4的源代码为基础。
首先需要下载&lt;a href=&#34;https://github.com/kubernetes/kubernetes/archive/v1.14.4.tar.gz&#34;&gt;kubernetesv1.14.4&lt;/a&gt;到本地，并导入到goland，方便我们进行改。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在kubernetes上运行elasticsearch集群</title>
      <link>https://goudai.github.io/posts/Deploy-Elasticsearch-Cluster-on-kubernetes/</link>
      <pubDate>Thu, 01 Aug 2019 14:03:40 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Deploy-Elasticsearch-Cluster-on-kubernetes/</guid>
      <description>&lt;p&gt;像elasticsearch这种应用属于重度依赖IO，依赖磁盘，对磁盘敏感的应用，如果采用分布式文件系统（NFS/GlusterFS等）来进行数据的存储，对ES的性能会造成很大的影响。
elasticsearch是具有状态的应用，我们可以采用两种方式部署，STS+LocalPV 或者是Deployment+NodeSelector+HostPath 的方式进行部署，本质上来说两者区别不大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在kubernetes上部署分布式日志系统EFK（7.x)</title>
      <link>https://goudai.github.io/posts/Deploy-distributed-log-system-EFK-on-kubernetes/</link>
      <pubDate>Thu, 01 Aug 2019 14:01:31 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Deploy-distributed-log-system-EFK-on-kubernetes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搭建代码仓库gitlab服务器</title>
      <link>https://goudai.github.io/posts/Deploy-gitlab-server/</link>
      <pubDate>Mon, 22 Jul 2019 12:43:16 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Deploy-gitlab-server/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;本章节讨论&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们的git服务器gitlab应该部署在企业内网，还是部署在公网如阿里云上，各自利弊。&lt;/li&gt;
&lt;li&gt;我们的代码仓库如何划分比较好。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Java code layering</title>
      <link>https://goudai.github.io/posts/Java-code-layering/</link>
      <pubDate>Sat, 20 Jul 2019 17:43:44 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Java-code-layering/</guid>
      <description>&lt;p&gt;一下是一个典型的java微服务项目的代码调用结构，分层次的目的在于&lt;code&gt;解耦合&lt;/code&gt;，&lt;code&gt;内聚变化&lt;/code&gt;，&lt;code&gt;减少重复代码&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了达到解开的目的我们会采用&lt;code&gt;Pojos&lt;/code&gt;来对每层之间的输入输出进行隔离，以期望，如，对视图的改动，格式化，等等不会对业务产生太大影响，为此我们会产生以下对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VO（View Object） 视图对象，他用于展示业务数据的封装格式，常常和视图一一对应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;QMO（Query Model Object） 查询模型对象。顾名思义，用于查询结构的封装载体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DTO（Data Transfer Object） DTO对象，即一个数据载体的封装格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DO（Domain Object）领域模型对象，也叫Entity实体对象，这里是我们对业务的模型的抽象模型，映射现实业务中的实体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PO（Persistent Object） PO对象，即持久化对象，用户解耦存储和业务直接的关系。实际开发中有了ORM之后，可直接用DO/Entity代替。和存储的（表结构，Document）等格式一一对应。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了这些对象的基本概念我们就可以对代码结构进行分层，完整的结构如图：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>部署kubernetes相关插件</title>
      <link>https://goudai.github.io/posts/Deploy-kubernetes-network-plugin/</link>
      <pubDate>Sat, 01 Jun 2019 23:19:35 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Deploy-kubernetes-network-plugin/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在&lt;a href=&#34;https://qingmu.io/2018/12/20/Deploy-a-highly-available-cluster-with-kubeadm/&#34;&gt;上一篇&lt;/a&gt;中我们完成了kubernetes的高可用集群的搭建，但我们搭建出来的集群状态均显示都是&lt;code&gt;Not Ready&lt;/code&gt;，这背后的原因是由于我们的
集群网络并没打通，本文我们将接着上文继续往下中，完成我们的集群网络插件的安装与部署。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  kubectl get cs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                 STATUS    MESSAGE             ERROR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;controller-manager   Healthy   ok                  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scheduler            Healthy   ok                  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;etcd-1               Healthy   {&amp;#34;health&amp;#34;:&amp;#34;true&amp;#34;}   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;etcd-2               Healthy   {&amp;#34;health&amp;#34;:&amp;#34;true&amp;#34;}   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;etcd-0               Healthy   {&amp;#34;health&amp;#34;:&amp;#34;true&amp;#34;}  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>在阿里云的VPC部署高可用kubernetes</title>
      <link>https://goudai.github.io/posts/Deploy-a-highly-available-cluster-with-kubeadm/</link>
      <pubDate>Fri, 17 May 2019 20:47:35 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Deploy-a-highly-available-cluster-with-kubeadm/</guid>
      <description>&lt;h1 id=&#34;kubernetes的基本概念&#34;&gt;kubernetes的基本概念&lt;/h1&gt;
&lt;h1 id=&#34;font-colorred写在前面的话font&#34;&gt;&lt;!-- raw HTML omitted --&gt;写在前面的话&lt;!-- raw HTML omitted --&gt;&lt;/h1&gt;
&lt;p&gt;整个安装过程中尽量不要出现写死的IP的情况出现，尽量全部使用域名代替IP。
网上大量的人使用KeepAlive+VIP的形式完成高可用，这个方式有两个不好的地方：
其一，受限于使用者的网络，无法适用于SDN网络，比如Aliyun的VPC。
其二，虽然是高可用的，但是流量还是单点的，所有node的的网络I/O都会高度集中于一台机器上（VIP)。
本文的高可用可通用于任何云上的SDN环境和自建机房环境，如阿里云的VPC环境中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Gateway syscall:read(..) Connection reset by peer</title>
      <link>https://goudai.github.io/posts/HAProxy-Spring-Gateway-Connection-reset-by-peer/</link>
      <pubDate>Thu, 10 Jan 2019 17:50:05 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/HAProxy-Spring-Gateway-Connection-reset-by-peer/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近花了一段时间完成了从zuul迁移到&lt;code&gt;Spring Cloud Gateway&lt;/code&gt;的工作，记录一下遇到的一个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>容器中的JVM资源该如何被安全的限制？</title>
      <link>https://goudai.github.io/posts/How-to-securely-limit-JVM-resources-in-a-container/</link>
      <pubDate>Mon, 17 Dec 2018 00:29:02 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/How-to-securely-limit-JVM-resources-in-a-container/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;Java与Docker的结合，虽然更好的解决了application的封装问题。但也存在着不兼容，比如Java并不能自动的发现Docker设置的内存限制,CPU限制。
&lt;!-- raw HTML omitted --&gt;这将导致JVM不能稳定服务业务！&lt;!-- raw HTML omitted --&gt;容器会杀死你JVM进程，而健康检查又将拉起你的JVM进程，进而导致你监控你的pod一天重启次数甚至能达到几百次。 &lt;!-- raw HTML omitted --&gt;
我们希望当Java进程运行在容器中时，java能够自动识别到容器限制，获取到正确的内存和CPU信息，而不用每次都需要在kubernetes的yaml描述文件中显示的配置完容器，还需要配置JVM参数。&lt;!-- raw HTML omitted --&gt;
使用JVM MaxRAM参数或者解锁实验特性的JVM参数，我们可以解决这个问题。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://goudai.github.io/about/</link>
      <pubDate>Mon, 17 Dec 2018 00:20:27 +0000</pubDate>
      
      <guid>https://goudai.github.io/about/</guid>
      <description>我的Gihtub 狗带 一款超实用的代码生成器，为通过给领域模型添加特定的注解，自动维护周边的模型（VO,DTO）以及ORM（MyBatis），提升效率60%以上，只要你是坚实的领域模型用户，相信我它绝对能帮上你。 spring-boot-starter-kafka 整合spring-boot和Kafka的一个项目，主要特点是简单（核</description>
    </item>
    
    <item>
      <title>Zuul源码分析(2)Filter分析</title>
      <link>https://goudai.github.io/posts/Zuul-processing-flow-and-business-extension-point-2/</link>
      <pubDate>Mon, 26 Nov 2018 23:19:17 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Zuul-processing-flow-and-business-extension-point-2/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;在&lt;a href=&#34;https://qingmu.io/2018/11/15/Zuul-processing-flow-and-business-extension-point/&#34;&gt;前一篇&lt;/a&gt;文件中我们分析了zuul对Filter请求了不同的阶段划分了多个生命周期即FilterType。接下来我们继续分析每一个FilterType的具体的Filter有哪些，他们都干了什么。&lt;/p&gt;
&lt;h1 id=&#34;zuulfilters运行流程图&#34;&gt;ZuulFilters运行流程图&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;前面我们分析完了zuul的一个生命周期，下面我们在来仔细的看一下每个生命周期具体使用到的Filter&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Zuul源码分析(1)生命周期</title>
      <link>https://goudai.github.io/posts/Zuul-processing-flow-and-business-extension-point/</link>
      <pubDate>Thu, 15 Nov 2018 23:19:17 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Zuul-processing-flow-and-business-extension-point/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Zuul在&lt;code&gt;Spring Cloud Netfilx&lt;/code&gt; 体系中扮演着接入者网关的角色。&lt;/li&gt;
&lt;li&gt;本质上来说Zuul本身就是一系列的filters, 可以类比Servlet框架的Filter。按照生命周期我们可以分为四种类型（pre,route,post,err）分别对应请求过程。你可以从&lt;code&gt;com.netflix.zuul.FilterProcessor&lt;/code&gt;类里面找到所有的生命周期处理。&lt;/li&gt;
&lt;li&gt;为什么我们要去了解它？比如我们想在网关统一对用户进行鉴权，进行&lt;code&gt;JWT&lt;/code&gt;的解析和参数转换，比如我们想实现自己的httpClient，再比如我们想在后端业务微服务返回的结果内进行一些特别的处理，比如脱敏啊，比如去掉一些字段啊。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>如何监控springboot应用</title>
      <link>https://goudai.github.io/posts/How-to-monitor-springboot-application/</link>
      <pubDate>Tue, 13 Nov 2018 23:43:52 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/How-to-monitor-springboot-application/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;对于整个微服务系统而言。一套及时的报警通知，可视化监控，是必不可少的。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>记SpringCloud 1.X 升级到2.x</title>
      <link>https://goudai.github.io/posts/How-to-upgrade-SpringCloud1-x-to-2-x/</link>
      <pubDate>Wed, 31 Oct 2018 13:32:01 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/How-to-upgrade-SpringCloud1-x-to-2-x/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;前后花了两周多个时间完成了 &lt;code&gt;Spring Boot 1.5.6.RELEASE &amp;amp; Spring Cloud Dalston.SR4&lt;/code&gt;  升级到 &lt;code&gt;Spring Boot 2.0.6.RELEASE &amp;amp; Spring Cloud Finchley.SR2 &amp;amp; spring-cloud-netflix  2.0.2.RELEASE&lt;/code&gt; 的工作。&lt;/li&gt;
&lt;li&gt;总结一下遇到的一些问题&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>记Kafka的一个BUG，导致整个集群不能工作</title>
      <link>https://goudai.github.io/posts/Kafka-bug-Cached-zkVersion-not-equal-to-that-in-zookeeper-broker-not-recovering/</link>
      <pubDate>Sun, 21 Oct 2018 10:28:37 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Kafka-bug-Cached-zkVersion-not-equal-to-that-in-zookeeper-broker-not-recovering/</guid>
      <description>&lt;p&gt;KAFKA 2.2.0 bug
&lt;a href=&#34;https://issues.apache.org/jira/browse/KAFKA-8052&#34;&gt;https://issues.apache.org/jira/browse/KAFKA-8052&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>jvm options</title>
      <link>https://goudai.github.io/images/jvm-options/</link>
      <pubDate>Wed, 26 Sep 2018 15:48:32 +0000</pubDate>
      
      <guid>https://goudai.github.io/images/jvm-options/</guid>
      <description>https://chriswhocodes.com/hotspot_option_differences.html UseContainerSupport 由于busybox的ps 导致依赖组件有点小瑕疵所以需要update一下ps的依赖 1 2 3 4 5 6 7 8 9 10 ps: unrecognized option: p BusyBox v1.28.4 (2018-05-30 10:45:57 UTC) multi-call binary. Usage: ps [-o COL1,COL2=HEADER] Show list of processes -o COL1,COL2=HEADER Select columns for display The target pid (11) does not exist! 执行下面命令修复 1 apk add --update procps 如果需要用到telnet 则需要安装一下 busybox-extras 1 apk add busybox-extras</description>
    </item>
    
    <item>
      <title>如何构建springcloud微服务中的异常处理体系</title>
      <link>https://goudai.github.io/images/How-to-handle-exceptions-gracefully-in-springcloud/</link>
      <pubDate>Mon, 20 Aug 2018 19:18:33 +0000</pubDate>
      
      <guid>https://goudai.github.io/images/How-to-handle-exceptions-gracefully-in-springcloud/</guid>
      <description>&lt;h1 id=&#34;需求&#34;&gt;需求&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;对于我们的任何系统而言一般分为正常的业务流程和异常业务流程&lt;/li&gt;
&lt;li&gt;我们希望业务在编写正常的业务逻辑的时候，无需去考虑处理异常的业务流程，异常对于正常的业务是完全分离的，透明的。&lt;/li&gt;
&lt;li&gt;我们希望前端也能有一套异常处理体系（在前后端分离下尤为重要）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;目标&#34;&gt;目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;搭建异常处理体系流程，统一的进行异常的管理和对应的处理（包括前后端）&lt;/li&gt;
&lt;li&gt;利用spring提供的全局异常处理器完成后端的server异常统一处理&lt;/li&gt;
&lt;li&gt;利用zuul的ErrorFilter统一处理网关相关异常&lt;/li&gt;
&lt;li&gt;利用Feign对异常的处理方式，及其扩展，完成服务调服务(S2S)时候异常透明的传递。&lt;/li&gt;
&lt;li&gt;利用&lt;a href=&#34;https://github.com/dvajs/dva&#34;&gt;dvs&lt;/a&gt; 的 app.use 方法注册自己的全局异常处理器插件，完成前端的异常流程体系&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>如何构建SpringBoot的Docker镜像</title>
      <link>https://goudai.github.io/posts/How-to-run-springcloud-in-docker/</link>
      <pubDate>Tue, 07 Aug 2018 21:21:18 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/How-to-run-springcloud-in-docker/</guid>
      <description>&lt;h1 id=&#34;目标&#34;&gt;目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;自定义Dockerfile构建一个生产可用的jre base image&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;maven-docker-plugin&lt;/code&gt;插件完成从源码的 &lt;code&gt;打包fatjar&lt;/code&gt; -&amp;gt; &lt;code&gt;build docker image with fatjar&lt;/code&gt; -&amp;gt; &lt;code&gt;push image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;支持docker对JVM相关参数的配置。比如Xmx，Xms，以及完全自定义的java启动参数。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>扩展spring-cloud-ribbon支持灰度</title>
      <link>https://goudai.github.io/posts/Extended-spring-cloud-ribbon-supports-grayscale/</link>
      <pubDate>Tue, 07 Aug 2018 12:42:47 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/Extended-spring-cloud-ribbon-supports-grayscale/</guid>
      <description>&lt;h1 id=&#34;目标&#34;&gt;目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;扩展ribbon完成灰度调用&lt;/li&gt;
&lt;li&gt;完成对zuul的支持&lt;/li&gt;
&lt;li&gt;完成服务间调用的支持&lt;/li&gt;
&lt;li&gt;实战，解决在开发环境，进行开发中的测试,DEBUG.在微服务的模式下,需要在开发者的机器启动大量服务，
启动大量的服务需要大量的内存和大量的时间，在我们时间的项目开发中，在16G的机器上甚至无法进行调
和测试相关工作。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>kubernetes全自动弹性伸缩组件</title>
      <link>https://goudai.github.io/posts/kubernetes-metrics-server/</link>
      <pubDate>Thu, 02 Aug 2018 12:02:42 +0000</pubDate>
      
      <guid>https://goudai.github.io/posts/kubernetes-metrics-server/</guid>
      <description>&lt;h1 id=&#34;目标&#34;&gt;目标&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;使用容器完成 metrics-server 部署&lt;/li&gt;
&lt;li&gt;演示 Horizontal Pod Autoscaling （pod 自动缩放）&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
