<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jvm on 青木的博客</title>
    <link>https://www.flysnow.org/tags/jvm/</link>
    <description>Recent content in jvm on 青木的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 17 Dec 2018 00:29:02 +0000</lastBuildDate><atom:link href="https://www.flysnow.org/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>容器中的JVM资源该如何被安全的限制？</title>
      <link>https://www.flysnow.org/posts/How-to-securely-limit-JVM-resources-in-a-container/</link>
      <pubDate>Mon, 17 Dec 2018 00:29:02 +0000</pubDate>
      
      <guid>https://www.flysnow.org/posts/How-to-securely-limit-JVM-resources-in-a-container/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;Java与Docker的结合，虽然更好的解决了application的封装问题。但也存在着不兼容，比如Java并不能自动的发现Docker设置的内存限制,CPU限制。
&lt;!-- raw HTML omitted --&gt;这将导致JVM不能稳定服务业务！&lt;!-- raw HTML omitted --&gt;容器会杀死你JVM进程，而健康检查又将拉起你的JVM进程，进而导致你监控你的pod一天重启次数甚至能达到几百次。 &lt;!-- raw HTML omitted --&gt;
我们希望当Java进程运行在容器中时，java能够自动识别到容器限制，获取到正确的内存和CPU信息，而不用每次都需要在kubernetes的yaml描述文件中显示的配置完容器，还需要配置JVM参数。&lt;!-- raw HTML omitted --&gt;
使用JVM MaxRAM参数或者解锁实验特性的JVM参数，我们可以解决这个问题。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
